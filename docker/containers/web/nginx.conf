user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;
    # gzip  on;

    upstream ghost_upstream {
        server ghost:$GHOST_PORT;
    }

    upstream app_upstream {
        server app:$APP_PORT;
        server app:$APP_DEV_PORT backup;
    }    

    upstream app_dev_upstream {
        server app:$APP_DEV_PORT;
    }

    server {
        # expect SSL requests, try to use HTTP2
        listen 443 ssl http2;

        # define our domain
        server_name $HOST_NAME;

        # configure SSL
        ssl_certificate $SSL_CERT_HOME/fullchain.pem;
        ssl_certificate_key $SSL_CERT_HOME/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_dhparam $SSL_CERT_HOME/dhparam.pem;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
        ssl_prefer_server_ciphers on;

        # define the public application root
        root $ROOT_DIR/app/public;

        # define where Nginx should write its logs
        access_log $LOG_DIR/nginx.access.log;
        error_log $LOG_DIR/nginx.error.log;

        include /etc/nginx/sites-enabled/*.conf;
    }

    server {
        # many clients will send unencrypted requests
        listen 80;

        # accept unencrypted ACME challenge requests
        location ^~ /.well-known/acme-challenge {
            alias $SSL_ROOT/.well-known/acme-challenge/;
        }

        # force insecure requests through SSL
        location / {
            return 301 https://$host$request_uri;
        }
    }

}